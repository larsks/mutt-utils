#!/usr/bin/python

import os
import sys
import email
import optparse

import dialog

def get_alias_name (opts, d):

    (code, selection) = d.inputbox(
            title='Set alias name',
            text='Choose a name for this alias.',
            height=8, width=60
            )

    print 'RESULT:', code, selection

    return selection

def select_one (opts, d, everyone):
    choices = [ ('"%s" <%s>' % x, '') for x in everyone ]

    (code, selection) = d.menu(
            title='Select address',
            text='Select the address for which you want to create an alias:',
            height=20, width=60, menu_height=15,
            choices = choices
            )

    print 'RESULT:', code, selection

    alias_name = get_alias_name(opts, d)

    fd = open(opts.alias_file, 'a')
    print >>fd, 'alias %s %s' % (alias_name, selection)

def select_group (opts, d, everyone):
    choices = [ ('"%s" <%s>' % x, '', 0) for x in everyone ]

    (code, selection) = d.checklist(
            text='Select the addresses you wish to add to an alias.',
            height=15, width=60, list_height=7,
            choices = choices,
            title='Select addresses',
            )

    print 'RESULT:', code, selection

def parse_addresses (fd):
    msg = email.message_from_file(fd)
    tos = msg.get_all('to', [])
    ccs = msg.get_all('cc', [])
    resent_tos = msg.get_all('resent-to', [])
    resent_ccs = msg.get_all('resent-cc', [])

    everyone = email.utils.getaddresses(tos + ccs + resent_tos + resent_ccs)

    return everyone

def parse_args ():
    p = optparse.OptionParser()

    p.add_option('-g', '--group', action='store_true')
    p.add_option('-a', '--alias-file')
    
    return p.parse_args()

def main():
    opts, args = parse_args()

    if not opts.alias_file:
        print 'You must specify an alias file.'
        sys.exit(1)

    everyone = parse_addresses(open(args[0]))

    d = dialog.Dialog(dialog='dialog')
    d.add_persistent_args(['--backtitle', 'Take Address'])

    if opts.group:
        select_group(opts, d, everyone)
    else:
        select_one(opts, d, everyone)

if __name__ == '__main__':
    main()

